USE sakila;

-- 1. List the number of films per category.
SELECT film_category.category_id,
	COUNT(film_category.category_id) AS films_per_category,
    category.name
FROM sakila.film_category
INNER JOIN category 
ON film_category.category_id = category.category_id
GROUP BY category_id;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT store.store_id, city.city, country.country
FROM sakila.store 
JOIN address ON store.address_id = address.address_id 
JOIN city ON address.city_id = city.city_id 
JOIN country ON city.country_id = country.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT store.store_id, SUM(payment.amount) AS total_revenue
FROM sakila.payment
JOIN staff ON payment.staff_id = staff.staff_id
JOIN store ON staff.store_id = store.store_id
GROUP BY store.store_id;

-- 4. Determine the average running time of films for each category.
SELECT category.name,ROUND(AVG(film.length), 2) AS avg_runtime
FROM sakila.film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name;

-- Bonus:
-- 5. Identify the film categories with the longest average running time.
SELECT category.name,ROUND(AVG(film.length), 2) AS avg_runtime
FROM sakila.film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name
ORDER BY avg_runtime DESC
LIMIT 5;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT film.title, COUNT(rental.rental_id) AS rent_frequency
FROM sakila.film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title
ORDER BY rent_frequency desc
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT film.title, inventory.store_id 
FROM sakila.inventory 
JOIN film ON inventory.film_id = film.film_id
WHERE film.title = 'ACADEMY DINOSAUR'
GROUP BY inventory.store_id;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT film.title,
    CASE	
		WHEN IFNULL(MAX(inventory.film_id), 0) = 0 THEN 'NOT Available'
        ELSE 'Available'
    END AS availability_status    
FROM sakila.film
LEFT JOIN inventory ON film.film_id = inventory.film_id
Group by film.title;